package com.scb.edmi.support;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelTestData {
	
	//public static Logger logeer = Logger.getLogger(this.class.getCanonicalName());
	
		public void readExcelSheet(String excelpath){
			String path = excelpath;
			fileRemove();
			String proppath = System.getProperty("user.dir")+"//src//main//resources//TestData.properties";
			Properties data = new Properties();
			File excelFile = new File(path);
			List<String> header = new ArrayList<String>();
			Row row = null;
			String testScenarioNo = null;
			try{
				FileInputStream fis = new FileInputStream(excelFile);
				XSSFWorkbook workbook = new XSSFWorkbook(fis);
				XSSFSheet wrksheet = workbook.getSheetAt(0);
				row = wrksheet.getRow(0);
				int colno = row.getPhysicalNumberOfCells();
				
				for(int i=0;i<row.getPhysicalNumberOfCells();i++){
					header.add(row.getCell(i).getStringCellValue());
				}
				//System.out.println(row.getRowNum()+"..."+row.getLastCellNum()+".."+row.getPhysicalNumberOfCells());
				for (int i=1; i< wrksheet.getPhysicalNumberOfRows();i++){
					row = wrksheet.getRow(i);
					System.out.println(row.getRowNum()+"..."+row.getLastCellNum()+".."+row.getPhysicalNumberOfCells());
					testScenarioNo = row.getCell(0).getStringCellValue().substring(row.getCell(0).getStringCellValue().length()-3);
					for (int j=0; j < colno; j++){
						//int k=0;
						
						String temp = null;
						org.apache.poi.ss.usermodel.Cell cell = row.getCell(j);
						switch (cell.getCellType()) {
						case Cell.CELL_TYPE_STRING:
							System.out.println("Value in the Cell"+cell.getStringCellValue());
							//logeer.info("String Data Read");
							temp = cell.getStringCellValue();
							//createTestDataFile(header.get(j), testScenarioNo, temp);
							break;
						case Cell.CELL_TYPE_NUMERIC:
							System.out.println("Value in the Cell"+cell.getNumericCellValue());
							//logeer.info("Numeric Data Read");
							temp = Double.toString(cell.getNumericCellValue());
							//createTestDataFile(header.get(j), testScenarioNo, temp1);
							break;
						case Cell.CELL_TYPE_BOOLEAN:
							System.out.println("Value in the Cell"+cell.getBooleanCellValue());
							//logeer.info("Boolean Data Read");
							temp = Boolean.toString(cell.getBooleanCellValue());
							//createTestDataFile(header.get(j), testScenarioNo, temp3);
							break;
						case Cell.CELL_TYPE_BLANK:
							System.out.println("Blank Data Type in Data Sheet");
							temp = "";
							//createTestDataFile(header.get(j), testScenarioNo, temp4);
							break;
						default:
							System.out.println("Invalid Data Type in Data Sheet");
							break;
						}
						String Key = header.get(j)+"_"+testScenarioNo;
						data.setProperty(Key, temp);
						
					}
					FileOutputStream fos = new FileOutputStream(proppath, true);
					data.store(fos,null);
					fos.close();
					data.clear();
				}
				
				fis.close();
			}
			catch (IOException io)
			{
				System.out.println("File Read Write Exception"+ io.getMessage());
			}
			catch (Exception e){
				System.out.println("Other Exceptions"+ e.getMessage());
			}
			
		}
	
		public void fileRemove()
		{
			String proppath = System.getProperty("user.dir")+"//src//main//resources//TestData.properties";
			File propfile = new File(proppath);
			if(propfile.exists()){
				propfile.delete();
				System.out.println("File Deleted Successfully");
			}
		}


}
